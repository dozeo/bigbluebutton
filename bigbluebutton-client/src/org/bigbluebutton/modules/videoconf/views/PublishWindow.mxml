<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton open source conferencing system - http://www.bigbluebutton.org
  
  Copyright (c) 2010 BigBlueButton Inc. and by respective authors (see below).
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 2.1 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
--> 

<doz:DOZWindow xmlns="flexlib.mdi.containers.*" 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:pubVid="flexlib.mdi.containers.*"
	xmlns:doz="com.dozeo.bbb.containers.*"
	implements="org.bigbluebutton.common.IBbbModuleWindow"
	creationComplete="init()"
	verticalAlign="middle"
	horizontalAlign="center"
	title="{ResourceUtil.getInstance().getString('bbb.publishVideo.title')}" 
	backgroundImage="{bbbLogo}" 
	resizable="true"
	xmlns:mate="http://mate.asfusion.com/">
	
	<mx:Script>
		<![CDATA[
			import flexlib.mdi.events.MDIWindowEvent;
			
			import mx.core.UIComponent;
			import mx.events.ResizeEvent;
			import mx.messaging.channels.AMFChannel;
			
			import org.bigbluebutton.common.Images;
			import org.bigbluebutton.main.views.MainCanvas;
			import org.bigbluebutton.modules.videoconf.events.CloseAllWindowsEvent;
			import org.bigbluebutton.modules.videoconf.events.StartBroadcastEvent;
			import org.bigbluebutton.modules.videoconf.events.StopBroadcastEvent;
			import org.bigbluebutton.util.i18n.ResourceUtil;
			
			private var images:Images = new Images();
			[Bindable] public var camIcon:Class = images.control_play;
			[Bindable] public var bbbLogo:Class = images.bbb_logo;
			[Bindable] private var resolutions:Array = new Array("320x240", "640x480"); // normal: 320x240, high: 640x480
			
			private var video:Video;
			private var camera:Camera;
			public var streamName:String;
			[Bindable] private var camWidth:Number = 320;
			[Bindable] private var camHeight:Number = 240;
			private var _userrole:String;
			public var quality:Number = 85;
			
			private var _maxWidth:int = 1024;
			private var _maxHeight:int = 1024;
			private var _minWidth:int = 60;
			private var _minHeight:int = 60;
			private var _bResizePossible:Boolean = true;
			private var _nAspectRatio:Number = 1;
			
			private function init():void{
				currentState = "dispVideoOptionsControlBar";
				checkIfMacCamera();
				if (isPresenter()) showResControls(true);
				if (Camera.names.length > 1) showVideoControls(true);
				if (!isPresenter() && Camera.names.length == 1) startPublishing();
				maximizeRestoreBtn.visible = false;
				setResolution();
				
				addEventListener(MDIWindowEvent.RESIZE_END, onResizeEndEvent);
				addEventListener(MDIWindowEvent.RESIZE, onResizeEvent);
			}
			
			public function getPrefferedPosition():String{
				return MainCanvas.POPUP;
			}
			
			private function startPublishing():void{
				camera = Camera.getCamera(cmbCameraSelector.selectedIndex.toString());
				if (camera == null) return;
				
				setResolution();
				
				//camera.setKeyFrameInterval(5);
				camera.setMode(camWidth,camHeight, 30, true);
				camera.setQuality(0, quality);
				
				video = new Video();
				video.width = camWidth;
				video.height = camHeight;
				video.attachCamera(camera);
				video.scaleX = -1; // flip video
				video.scaleX = -1; video.x = video.width + video.x;
				videoHolder.rawChildren.addChild(video);
				
				var e:StartBroadcastEvent = new StartBroadcastEvent();
				e.stream = this.streamName;
				e.camera = camera;
				dispatchEvent(e);
				
				showVideoControls(false);
				showResControls(false);
			}
			
			override public function close(event:MouseEvent=null):void{
				stopPublishing();
				super.close(event);
			}
			
			private function stopPublishing():void{
				if (video != null) {
					video.attachCamera(null);
					video.clear();
					video = null;
				}
				var e:StopBroadcastEvent = new StopBroadcastEvent()
				e.stream = this.streamName;
				dispatchEvent(e);
			}
			
			private function setResolution():void{
				if (cmbResolution.selectedLabel == "320x240"){
					camWidth = 320;					
					camHeight = 240;
				} else if (cmbResolution.selectedLabel == "640x480"){
					camWidth = 640;					
					camHeight = 480;
				}
				this.streamName = cmbResolution.selectedLabel.concat(this.streamName);
				
				this.width = camWidth;
				this.height = camHeight + 80;
				
				// save aspect ratio
				_nAspectRatio = (camWidth / camHeight)
			}
			
			public function set userrole(role:String):void{
				this._userrole = role;
			}
			
			private function isPresenter():Boolean{
				if (this._userrole == "MODERATOR" || this._userrole == "PRESENTER") return true;
				else return false;
			}
			
			private function showVideoControls(show:Boolean):void{
				if (show){
					currentState = "dispVideoOptionsControlBar"
					videoOptionsBar.visible = true;
					btnStartPublish.visible = true;
					cmbCameraSelector.visible = true;
				} else{					
					videoOptionsBar.visible = true;
					btnStartPublish.visible = true;
					cmbCameraSelector.visible = false;
					currentState = "dispQuitControlBar";
				}
			}
			
			private function showResControls(show:Boolean):void{
				if (show) cmbResolution.visible = true;
				else cmbResolution.visible = false;
			}
			
			private function closeWindow(e:CloseAllWindowsEvent):void{
				closeThisWindow();
			}
			
			private function closeThisWindow():void {
				this.close();
			}
			
			private function checkIfMacCamera():void{
				for (var i:int = 0; i<Camera.names.length; i++){
					if (Camera.names[i] == "USB Video Class Video") {
						/**
						 * Set as default for Macs
						 */
						cmbCameraSelector.selectedIndex = i;
					}
				}
			}
			
			override protected function resourcesChanged():void{
				super.resourcesChanged();
				this.title = ResourceUtil.getInstance().getString('bbb.publishVideo.title');
			}
			
			public function onResizeEvent(event:Event):void {
				// test if we are already resizing
				if (_bResizePossible) {
					_bResizePossible = false;
					resizeWindow();
					_bResizePossible = true;
				}
			}
			
			private function resizeWindow():void {
				if (this.width > _maxWidth) {
					this.width = _maxWidth;
				}
				if (this.height > _maxHeight) {
					this.height = _maxHeight;
				}
				if (this.height < _minHeight) {
					this.height = _minHeight;
				}
				if (this.width < _minWidth) {
					this.width = _minWidth;
				}
				
				// recalc size of video based on the width and height of the window
				video.width = this.width;
				// make sure the video has a correct aspectratio to avoid tall or flat faces
				video.height  = Math.floor (video.width / _nAspectRatio);
				this.height = video.height + 80;
			}
			
			public function onResizeEndEvent(event:MDIWindowEvent):void {
				// make sure the height of the window is correct
				//if ( video.height + 29 > this.height) {
				//	this.height = video.height + 29;
				//} 
			}
			
		]]>
	</mx:Script>

	<doz:states>
	    <!--http://stackoverflow.com/questions/369120/why-does-mxstates-have-trouble-being-resolved-to-a-component-implementation-->
        <mx:State name="dispQuitControlBar">   
            <mx:AddChild>
            	<mx:ControlBar id="quitOptionsBar">
            		<mx:Spacer width="50%"/>
					<mx:Button id="btnQuitPublish" toolTip="{ResourceUtil.getInstance().getString('bbb.video.publish.close.tooltip')}" label="{ResourceUtil.getInstance().getString('bbb.video.publish.close.label')}" visible="true" click="closeThisWindow()" />
					<mx:Spacer width="50%"/>
				</mx:ControlBar>	
            </mx:AddChild>
        </mx:State>		
        <mx:State name="dispVideoOptionsControlBar">   
            <mx:AddChild>
				<mx:ControlBar id="videoOptionsBar">
					<mx:Button id="btnStartPublish" toolTip="{ResourceUtil.getInstance().getString('bbb.publishVideo.startPublishBtn.toolTip')}" icon="{camIcon}" click="startPublishing()" />
					<mx:ComboBox id="cmbCameraSelector" dataProvider="{Camera.names}" width="150" visible="false" />
					<mx:ComboBox id="cmbResolution" dataProvider="{resolutions}" width="20%" visible="false" />
				</mx:ControlBar>
            </mx:AddChild>
        </mx:State>	
	</doz:states>
		
	<mx:Canvas id="videoHolder" width="100%" height="100%" verticalScrollPolicy="off" horizontalScrollPolicy="off" />

	<mate:Listener type="{CloseAllWindowsEvent.CLOSE_ALL_WINDOWS}" method="closeWindow" />
</doz:DOZWindow>
